xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey30") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "purple") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey90") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey30") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Analysis
################################################################################
# Examine number of published articles by field or survey
# with  group
sum = meta %>%
group_by(published, type) %>%
summarise (number = n())
# Regression test for funnel plot asymmetry
regtest = regtest(me_mod, model = "lm", predictor = "sei")
funnel(me_mod)
qqnorm(fe_survey)
qqnorm(fe_field)
qqnorm(re)
# p-curve
################################################################################
# Plot p-values
################################################################################
# Calculate p-values from point estimates and standard errors
meta$p = with(meta, pnorm(ate_vote/se_vote))
# Calculate percentage of p-values below value
meta$p_threshold = with(meta, ifelse(p < 0.05, .05, NA))
meta$p_threshold = with(meta, ifelse(p < 0.04, .04, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.03, .03, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.02, .02, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.01, .01, p_threshold))
# Keep below 0.05 only
p_curve = meta %>% filter(!is.na(p_threshold))
# Calculate percentages of p-values under values
p_curve = p_curve %>% group_by(p_threshold) %>% summarize(count=n())
p_curve$p_threshold = as.factor(p_curve$p_threshold)
p_curve$percent = p_curve$count / sum(p_curve$count)
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey30") +
xlab("ATE") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey30") +
xlab("Share of studies below p-value (%)") +
xlab("P-values") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("Share of studies below p-value (%)") +
xlab("P-values") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
ylab("Share of studies below p-value (%)") +
xlab("P-values") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
ylab("Share of studies below p-value (%)") +
xlab("P-values") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("P-values") +
ylab("Share of studies below p-value (%)") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("P-values") +
ylab("Share of studies below p-value (%)") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Analysis
################################################################################
# Examine number of published articles by field or survey
# with  group
sum = meta %>%
group_by(published, type) %>%
summarise (number = n())
# Regression test for funnel plot asymmetry
regtest = regtest(me_mod, model = "lm", predictor = "sei")
funnel(me_mod)
qqnorm(fe_survey)
qqnorm(fe_field)
qqnorm(re)
# p-curve
################################################################################
# Plot p-values
################################################################################
# Calculate p-values from point estimates and standard errors
meta$p = with(meta, pnorm(ate_vote/se_vote))
# Calculate percentage of p-values below value
meta$p_threshold = with(meta, ifelse(p < 0.05, .05, NA))
meta$p_threshold = with(meta, ifelse(p < 0.04, .04, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.03, .03, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.02, .02, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.01, .01, p_threshold))
# Keep below 0.05 only
p_curve = meta %>% filter(!is.na(p_threshold) & field == 0)
# Calculate percentages of p-values under values
p_curve = p_curve %>% group_by(p_threshold) %>% summarize(count=n())
p_curve$p_threshold = as.factor(p_curve$p_threshold)
p_curve$percent = p_curve$count / sum(p_curve$count)
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("P-values") +
ylab("Share of studies below p-value (%)") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Analysis
################################################################################
# Examine number of published articles by field or survey
# with  group
sum = meta %>%
group_by(published, type) %>%
summarise (number = n())
# Regression test for funnel plot asymmetry
regtest = regtest(me_mod, model = "lm", predictor = "sei")
funnel(me_mod)
qqnorm(fe_survey)
qqnorm(fe_field)
qqnorm(re)
# p-curve
################################################################################
# Plot p-values
################################################################################
# Calculate p-values from point estimates and standard errors
meta$p = with(meta, pnorm(ate_vote/se_vote))
# Calculate percentage of p-values below value
meta$p_threshold = with(meta, ifelse(p < 0.05, .05, NA))
meta$p_threshold = with(meta, ifelse(p < 0.04, .04, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.03, .03, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.02, .02, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.01, .01, p_threshold))
# Keep below 0.05 only
p_curve = meta %>% filter(!is.na(p_threshold) & field == 0)
View(p_curve)
# Calculate percentages of p-values under values
p_curve = p_curve %>% group_by(p_threshold) %>% summarize(count=n())
p_curve$p_threshold = as.factor(p_curve$p_threshold)
p_curve$percent = p_curve$count / sum(p_curve$count)
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Analysis
################################################################################
# Examine number of published articles by field or survey
# with  group
sum = meta %>%
group_by(published, type) %>%
summarise (number = n())
# Regression test for funnel plot asymmetry
regtest = regtest(me_mod, model = "lm", predictor = "sei")
funnel(me_mod)
qqnorm(fe_survey)
qqnorm(fe_field)
qqnorm(re)
# p-curve
################################################################################
# Plot p-values
################################################################################
# Calculate p-values from point estimates and standard errors
meta$p = with(meta, pnorm(ate_vote/se_vote))
# Calculate percentage of p-values below value
meta$p_threshold = with(meta, ifelse(p < 0.05, .05, NA))
meta$p_threshold = with(meta, ifelse(p < 0.04, .04, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.03, .03, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.02, .02, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.01, .01, p_threshold))
# Keep below 0.05 only
p_curve = meta %>% filter(!is.na(p_threshold) & field == 1)
# Calculate percentages of p-values under values
p_curve = p_curve %>% group_by(p_threshold) %>% summarize(count=n())
p_curve$p_threshold = as.factor(p_curve$p_threshold)
p_curve$percent = p_curve$count / sum(p_curve$count)
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("P-values") +
ylab("Share of studies below p-value (%)") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/pcurve.pdf", height = 4, width = 6)
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Analysis
################################################################################
# Examine number of published articles by field or survey
# with  group
sum = meta %>%
group_by(published, type) %>%
summarise (number = n())
# Regression test for funnel plot asymmetry
regtest = regtest(me_mod, model = "lm", predictor = "sei")
funnel(me_mod)
qqnorm(fe_survey)
qqnorm(fe_field)
qqnorm(re)
# p-curve
################################################################################
# Plot p-values
################################################################################
# Calculate p-values from point estimates and standard errors
meta$p = with(meta, pnorm(ate_vote/se_vote))
# Calculate percentage of p-values below value
meta$p_threshold = with(meta, ifelse(p < 0.05, .05, NA))
meta$p_threshold = with(meta, ifelse(p < 0.04, .04, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.03, .03, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.02, .02, p_threshold))
meta$p_threshold = with(meta, ifelse(p < 0.01, .01, p_threshold))
# Keep below 0.05 only
p_curve = meta %>% filter(!is.na(p_threshold) & field == 1)
# Calculate percentages of p-values under values
p_curve = p_curve %>% group_by(p_threshold) %>% summarize(count=n())
p_curve$p_threshold = as.factor(p_curve$p_threshold)
p_curve$percent = p_curve$count / sum(p_curve$count)
# Plot p values
ggplot(p_curve) +
geom_point(aes(p_threshold, percent, group = 1),
color = "steelblue2", size = 1.5) +
geom_line(aes(p_threshold, percent, group = 1), color = "grey70") +
xlab("P-values") +
ylab("Share of studies below p-value (%)") +
scale_y_continuous(labels = scales::percent, limits = c(0, 1), breaks=seq(0,1,.1)) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
################################################################################
# Libraries and Import
################################################################################
rm(list=ls())
# Libraries
library(tidyverse)
library(metafor)
# Data import
load(file="data/meta_results.RData")
################################################################################
# Plot field results
################################################################################
# Add meta-anlaysis parameters
ate_vote_fe = coef(fe_field)
se_vote_fe = summary(fe_field)$se
ate_vote_re = coef(re_field)
se_vote_re = summary(re_field)$se
meta_fe = data.frame(type="Field", year=NA, author = "Fixed effects model",
author_reduced = "Fixed effects model", country = NA,
ate_vote = ate_vote_fe, se_vote = se_vote_fe, ci_upper = NA,
ci_lower = NA, published = NA, N = NA, Notes = NA)
meta_re = data.frame(type="Field", year=NA, author = "Random effects model",
author_reduced = "Random effects model", country = NA,
ate_vote = ate_vote_re, se_vote = se_vote_re, ci_upper = NA,
ci_lower = NA, published = NA, N = NA, Notes = NA)
field = rbind(field, meta_fe, meta_re)
# Re-order factor levels
field$author_reduced = fct_relevel(field$author_reduced, "Fixed effects model", after = 0)
field$author_reduced = fct_relevel(field$author_reduced, "Random effects model", after = 0)
# Plot field results
ggplot(field, aes(ate_vote, author_reduced)) +
geom_point(color = "seagreen3", size = 1.5) +
geom_point(data = subset(field,
author_reduced == "Fixed effects model" |
author_reduced == "Random effects model"),
size = 1.5, color = "black", fill = "black") +
geom_errorbarh(aes(y = author_reduced,
xmin = ate_vote - 1.96*se_vote,
xmax = ate_vote + 1.96*se_vote),
color="grey30", size=0.5, alpha = 0.5, height = 0.2) +
geom_text(aes(label = country, x = 0.25, y = author_reduced), size = 3) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 2.5, linetype = "solid") +
xlab("Change in vote share (percentage points)") +
scale_x_continuous(limits = c(-.9, 0.3), breaks=seq(-.9,0.3, .1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/field.pdf", height = 3.5, width = 6)
#ggsave("figs/field_no_banerjee.pdf", height = 3.5, width = 6)
# Plot field results: distribution
ggplot(field, aes(ate_vote)) +
geom_histogram(color = "steelblue2", size = 1, stat = "density") +
theme_classic()
################################################################################
# Plot survey results
################################################################################
# Add meta-anlaysis parameters
ate_vote_fe = coef(fe_survey)
se_vote_fe = summary(fe_survey)$se
ate_vote_re = coef(re_survey)
se_vote_re = summary(re_survey)$se
meta_fe = data.frame(type="Survey", year=NA, author = "Fixed effects model",
author_reduced = "Fixed effects model", country = NA,
ate_vote = ate_vote_fe, se_vote = se_vote_fe, ci_upper = NA,
ci_lower = NA, published = NA, N = NA, Notes = NA)
meta_re = data.frame(type="Survey", year=NA, author = "Random effects model",
author_reduced = "Random effects model", country = NA,
ate_vote = ate_vote_re, se_vote = se_vote_re, ci_upper = NA,
ci_lower = NA, published = NA, N = NA, Notes = NA)
survey = rbind(survey, meta_fe, meta_re)
# Re-order factor levels
survey$author_reduced = fct_relevel(survey$author_reduced, "Fixed effects model", after = 0)
survey$author_reduced = fct_relevel(survey$author_reduced, "Random effects model", after = 0)
# Plot field results
ggplot(survey, aes(ate_vote, author_reduced)) +
geom_point(color = "steelblue2", size = 1.5) +
geom_point(data = subset(survey,
author_reduced == "Fixed effects model" |
author_reduced == "Random effects model"),
size = 1.5, color = "black", fill = "black") +
geom_errorbarh(aes(y = author_reduced,
xmin = ate_vote - 1.96*se_vote,
xmax = ate_vote + 1.96*se_vote),
color="grey30", size=0.5, alpha = 0.5, height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
geom_hline(yintercept = 2.5, linetype = "solid") +
geom_text(aes(label = country, x = 0.25, y = author_reduced), size = 3) +
xlab("Change in vote share (percentage points)") +
scale_x_continuous(limits = c(-.9, 0.3), breaks=seq(-.9,0.3, .1)) +
theme_classic() +
theme(axis.title.y=element_blank()) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text=element_text(size = 8)) +
theme(axis.text.x = element_text(size = 8)) +
theme(legend.position = "none")
ggsave("figs/survey.pdf", height = 4, width = 6)
